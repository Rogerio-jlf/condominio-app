// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ================================================================================

// ========================
// MODELS
// ========================
model Condominio {
  id               Int    @id @default(autoincrement())
  nome             String
  taxaFundoReserva Float // valor fixo mensal para cada apartamento
}

model Apartamento {
  id      Int             @id @default(autoincrement())
  numero  String          @unique // Ex: "101", "102", "103", "104"
  morador String? // Nome do morador atual
  area    Float // Área em m² (para rateio da água)
  rateios DespesaRateio[]
}

model Despesa {
  id         Int             @id @default(autoincrement())
  descricao  String
  valorTotal Float
  tipo       TipoDespesa
  data       DateTime        @default(now())
  rateios    DespesaRateio[]
}

model DespesaRateio {
  id            Int         @id @default(autoincrement())
  valor         Float
  apartamentoId Int
  despesaId     Int
  apartamento   Apartamento @relation(fields: [apartamentoId], references: [id])
  despesa       Despesa     @relation(fields: [despesaId], references: [id])
}

// ================================================================================

// ========================
// ENUMS
// ========================
enum TipoDespesa {
  AGUA // rateio proporcional à área
  GERAL // rateio igual entre todos
}

// ================================================================================

// ========================
// MODELS BETTER-AUTH
// ========================
model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean   @default(false)
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now()) @updatedAt
  sessions      Session[]
  accounts      Account[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@map("account")
}

model Verification {
  id         String   @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  @@map("verification")
}

// ================================================================================
